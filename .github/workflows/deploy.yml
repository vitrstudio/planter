name: Deploy to AWS

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Build and Deploy to EC2
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: us-east-1
      GITHUB_ROLE_ARN: arn:aws:iam::962926148312:role/planter-github-actions-role

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant Gradle execute permission
        run: chmod +x gradlew

      - name: Build JAR with Gradle
        run: ./gradlew clean build -x test

      - name: Verify built artifacts exist
        run: |
          test -f Dockerfile
          test -f scripts/start-app.sh
          ls -l build/libs/*.jar

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.GITHUB_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Retrieve deployment values from SSM
        id: fetch_params
        run: |
          # If any of these fail, the job will stop immediately
          echo "EC2_INSTANCE_ID=$(aws ssm get-parameter --name /planter/ec2_instance_id --with-decryption --query Parameter.Value --output text)" >> $GITHUB_ENV
          echo "RDS_ENDPOINT=$(aws ssm get-parameter --name /planter/rds_endpoint --with-decryption --query Parameter.Value --output text)" >> $GITHUB_ENV
          echo "DEPLOYMENT_BUCKET=$(aws ssm get-parameter --name /planter/deployment_bucket --with-decryption --query Parameter.Value --output text)" >> $GITHUB_ENV
          echo "DB_PASSWORD=$(aws ssm get-parameter --name /planter/db_password --with-decryption --query Parameter.Value --output text)" >> $GITHUB_ENV

      - name: Get JAR filename
        run: |
          JAR_FILE=$(ls build/libs/*-SNAPSHOT.jar | grep -v plain)
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV
          echo "Checking for $JAR_FILE"
          ls -lh "$JAR_FILE"

      - name: Upload deployment artifacts to S3
        run: |
          aws s3 cp "$JAR_FILE" s3://$DEPLOYMENT_BUCKET/deployments/app.jar
          aws s3 cp Dockerfile s3://$DEPLOYMENT_BUCKET/deployments/Dockerfile
          aws s3 cp scripts/start-app.sh s3://$DEPLOYMENT_BUCKET/deployments/start-app.sh

      - name: Run remote deployment via SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "$EC2_INSTANCE_ID" \
            --comment "Deploy planter app" \
            --parameters 'commands=["#!/bin/bash
            set -eux
            mkdir -p /home/ec2-user/app
            aws s3 cp s3://'"$DEPLOYMENT_BUCKET"'/deployments/app.jar /home/ec2-user/app/app.jar
            aws s3 cp s3://'"$DEPLOYMENT_BUCKET"'/deployments/Dockerfile /home/ec2-user/app/Dockerfile
            aws s3 cp s3://'"$DEPLOYMENT_BUCKET"'/deployments/start-app.sh /home/ec2-user/app/start-app.sh
            chmod +x /home/ec2-user/app/start-app.sh
            DB_URL=jdbc:postgresql://'"$RDS_ENDPOINT"'/planterdb \
            DB_USERNAME=planteradmin \
            DB_PASSWORD='"$DB_PASSWORD"' \
            PROJECT_NAME=planter \
            /home/ec2-user/app/start-app.sh"]' \
            --region $AWS_REGION
